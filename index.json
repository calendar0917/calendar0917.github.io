[{"categories":["开发"],"content":"SpringBoot 的优势 SpringBoot 是由Pivotal团队提供的全新框架，其设计目的是用来简化Spring应用的初始搭建以及开发过程。 简化操作体现在四个方面 parent 统一控制版本，解决版本冲突问题 starter 整合依赖的固定搭配格式，减少依赖配置 引导类 @SpringBootApplication，用于启动程序、初始化容器 内嵌 Tomcat ","date":"2025-09-22","objectID":"/springboot%E5%AE%9E%E7%94%A8%E6%95%99%E7%A8%8B/:1:0","tags":["技术"],"title":"SpringBoot简明教程","uri":"/springboot%E5%AE%9E%E7%94%A8%E6%95%99%E7%A8%8B/"},{"categories":["开发"],"content":"配置 首先，需要用 maven 来将 SpringBoot 的环境搭建好。也可以从官网下载源文件进行导入。 在 application.properties 中可以更改已导入 starter 的配置。更进一步，可以在 .yml 以及 .yaml 中进行配置，简化书写。 配置中的数据也是可以被使用的，用Spring中的注解@Value读取单个数据，如 @Value(\"{$server.port}\") ，同时，所有的数据封装到了一个 Environment 对象当中，可以调用。 ","date":"2025-09-22","objectID":"/springboot%E5%AE%9E%E7%94%A8%E6%95%99%E7%A8%8B/:2:0","tags":["技术"],"title":"SpringBoot简明教程","uri":"/springboot%E5%AE%9E%E7%94%A8%E6%95%99%E7%A8%8B/"},{"categories":["开发"],"content":"技术整合 JUnit @SpringBootTest class Springboot04JunitApplicationTests { //注入你要测试的对象 @Autowired private BookDao bookDao; @Test void contextLoads() { //执行要测试的对象对应的方法 bookDao.save(); System.out.println(\"two...\"); } } 简化了测试类的编写，自动装配要测试的对象。 Mybatis @Mapper public interface BookDao { @Select(\"select * from tbl_book where id = #{id}\") public Book getById(Integer id); } 导入、配置以后，用一个 Dao 映射端口即可实现 Mybatis 的功能。 Lombok import lombok.Data; @Data public class Book { private Integer id; private String type; private String name; private String description; } 直接通过注解实现 getter、setter 等操作的自动添加。 ","date":"2025-09-22","objectID":"/springboot%E5%AE%9E%E7%94%A8%E6%95%99%E7%A8%8B/:2:1","tags":["技术"],"title":"SpringBoot简明教程","uri":"/springboot%E5%AE%9E%E7%94%A8%E6%95%99%E7%A8%8B/"},{"categories":["开发"],"content":"基本开发流程 ","date":"2025-09-22","objectID":"/springboot%E5%AE%9E%E7%94%A8%E6%95%99%E7%A8%8B/:3:0","tags":["技术"],"title":"SpringBoot简明教程","uri":"/springboot%E5%AE%9E%E7%94%A8%E6%95%99%E7%A8%8B/"},{"categories":["开发"],"content":"架构 JavaWeb 的开发一般为前后端分离开发，此处说明后端开发的架构。 Controller层 接收前端传输过来的数据，并将后端处理后的数据返回给前端，作为前后端联通的桥梁。 @RestController @RequestMapping(\"/books\") public class BookController2 { @Autowired private IBookService bookService; @GetMapping(\"/...\") public List\u003cBook\u003e getAll(){ return bookService.list(); } 指定接收路径、接收参数的格式。 路径变量用 @PathVariable 接收，Json 变量用 @RequestBody 接收，并自动封装到对应的对象中。（如果参数差别过大，可能需要用DTO对象来进行中介，然后再用 BeanUtils 方法来克隆到实体对象） 返回的变量一般封装为 Result 对象传输到前端。 Service层 作为后端逻辑处理的核心，在 Controller 层调用以后，进行一定的加工，调用 Mapper 并把结果再返回给 Controller。 需要先定义一个接口，然后根据接口实现 Impl 类，后续直接 @Autowired即可自动调用。 Mapper层 处理数据库的枢纽，执行指定 SQL 。 复杂的 、动态SQL 语句可映射到 Mapper.xml 文件当中进行编写。 ","date":"2025-09-22","objectID":"/springboot%E5%AE%9E%E7%94%A8%E6%95%99%E7%A8%8B/:3:1","tags":["技术"],"title":"SpringBoot简明教程","uri":"/springboot%E5%AE%9E%E7%94%A8%E6%95%99%E7%A8%8B/"},{"categories":["开发"],"content":"未完待续 Aspect 切面类，公共字段填充 消息扩展器统一日期格式 Redis + 自动缓存 …… ","date":"2025-09-22","objectID":"/springboot%E5%AE%9E%E7%94%A8%E6%95%99%E7%A8%8B/:4:0","tags":["技术"],"title":"SpringBoot简明教程","uri":"/springboot%E5%AE%9E%E7%94%A8%E6%95%99%E7%A8%8B/"},{"categories":["生活"],"content":"我的十九岁过去了，趁着这个时候反思一下过去的一年吧。 最大的变化大约是离开高中，进入大学，度过了一个学年。但是学生的身份并没有改变，总体来说，生活方式还是和以前并没有太大改变。 ","date":"2025-09-08","objectID":"/19%E5%B2%81%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/:0:0","tags":[""],"title":"19岁","uri":"/19%E5%B2%81%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/"},{"categories":["生活"],"content":"学习 既然还是学生，就从学习开始。大学的学习自主得多，方向也模糊得多。免除了高中单一的指向性，取而代之的并不是异化的消失，而是多元体系的继续。大学内部培养、筛选的人还是应试能力强的，附加条件是科研能力（暂时未知的领域），一定的处理人际关系的能力。这一年并没有完全摸清楚情况，只是惯性地保持着绩点、均分。最后也错峰地选了网安。 就纯知识来说，课内的学习几近一无所得。数理逻辑用不到实处，估计很快也就要遗忘了；计算机方面也是聊胜于无。现在回过来看，水课确实太多，付出的精力也多了点。思政类课程全是闲谈，也讲不到实处。课程纯靠老师控制着的分数裁量权支撑。 就自学来说，还是学了一些东西。大一开学做的小项目，也算培养了一点动手能力。后面是时间比较长的寻找-试错的时间，对未来去向的迷茫，驱动着自己去看看各种可能性。刷了一段时间算法题，然后学了python，寒假就一直在听算法题，但陋习就是光听不爱动手。开学以后，蓝桥杯得了省三，算是清楚自己几斤几两了。后面学了一点前端三件套，效率很低地、不动脑子地学习。再接下来就是学Java了，开始往就业方向准备，直到现在开始听项目。暑假听完Java的基础，也开始学CTF，到现在也一个月了，还是有些云里雾里。 总的来看，过去一年就是在找路、打基础的过程。多多少少也学了一些。要说对后面有什么启发，大约就是： 学习要动手 抓大放小，不要在细节上纠结，尽可能总览全局然后针对性学习 信息的检索、筛选要适度，同时尽可能文字化，不要兜圈子 要权衡，然后投入 ","date":"2025-09-08","objectID":"/19%E5%B2%81%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/:1:0","tags":[""],"title":"19岁","uri":"/19%E5%B2%81%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/"},{"categories":["生活"],"content":"生活 也许不应该把学习和生活区分开，但还是权且这样分吧。 生活上冲击比较大的也许是消费观念。这是第一次拥有能够自己管理的定量钱款，学习怎么消费也是一个比较漫长的过程。从一开始的极尽节约、在部分消费品上花钱；到后面的透支；再到后面的适应——适应自己的经济水平。这部分还是在学习、考量当中。 把阅读也放在这里吧。这一年也读了不少的书，偏向政治-经济-历史。读来还是颇有收获，但是难以量化，个人究竟有多少长进、视界有多少提高还很难说。遇到的主要问题是有点难以主动思考，难以把看过的直接用于现实。也就导致了一种观念和现实的割裂感，不懂在读什么。也许问题不在于读什么，而在于做？偏偏自己又没有能力——或者是用“没有能力”来逃避——去做一些和观念相符的事情。所能做的好像就是无限的准备，无限地趋近，又好像是不切实际。 接下来的要求： 用输出来引导读书，倒逼自己思考、产出 需要更深入的思考、更清晰的观察 再就是享乐模式。刚上大学，仿佛就是应该打游戏、放松的；但是真正尝试下来，这些东西都没能吸引自己。都是枯燥、乏味的重复，僵死、繁复的规则堆叠；精力也不断被消耗。失去吸引力以后，便是长时间的飘忽转换，没办法把自己固定在某种状态上。也许可以说这是暴露在焦虑当中？没什么太多好说的，要注意的就是培养健康、合理的宣泄方式，不要再在各种形形色色的情态前迷失。 ","date":"2025-09-08","objectID":"/19%E5%B2%81%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/:2:0","tags":[""],"title":"19岁","uri":"/19%E5%B2%81%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/"},{"categories":["生活"],"content":"情感 写在最后的，反而是最重要的吧。这一年的感情的大背景是不断的震荡，在喜悦-怀疑-失望等等之间来回转换。 梳理一下过程吧。一开始，初来的分离还感受不太深，一切如旧。依然是习惯性地对话，仿佛互相融入了生活。后来一点点的矛盾就会放大互相的情绪，也许再加上课业愈重，慢慢也就渐行渐远了。自己的问题主要在于，太过在意，放大一切可能的、对方的情感和倾向。有很多想法都自己消化，没有很好地交流疏通。再加关系本就不确定，更加重的自己的心慌，迫切地想要某种情感的证明，也许这就是错位的点罢。长久的分离面前，也许一方想的是通过有力的、热烈的扭结来抵抗，另一方想的是来日方长、细水长流。 在这样的错位之下，在自己这里剩下的就是无止境的自我分裂。沉浸在这种情绪的背景当中，反而自然地卸除了生活的重量——毕竟只要沉浸、挣扎就好了。但是沟通的障碍到底是什么？生活的互不相交也许是一部分，对自己的保护也是一部分，胆小、懒惰也是一部分。毕竟解决了问题以后，连挣扎也挣扎不了了；毕竟纠结于当下和过去，比筹划一个未来并为之努力简单得多。 现在又是一个什么样的情况呢？自己变得不太能同对方交流，而对方的交流也是避开了感情问题。这怎么办？不管怎么说，不能再这样下去。新一年的要求： 感情不能再作为背景，而要放到前台加以解决、维护 把关系引向一个开放的、充满希望和前景的未来 理性地思考，脱离幻想的漩涡，面对生活 十九岁就这样过去了。 ","date":"2025-09-08","objectID":"/19%E5%B2%81%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/:3:0","tags":[""],"title":"19岁","uri":"/19%E5%B2%81%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/"},{"categories":null,"content":"欢迎来到我的网站 本网站主要用于记录技术文章以及个人生活。 始于2025.9.18 Calendar ","date":"0001-01-01","objectID":"/page/about/:0:0","tags":null,"title":"关于","uri":"/page/about/"}]